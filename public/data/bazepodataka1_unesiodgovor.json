[
  {
    "id": 1,
    "question": "Objasni pojmove stepen, kardinalnost i atribut relacije.",
    "answers": [],
    "correctAnswer": "Stepen = broj atributa u relaciji; Kardinalnost = broj n-torki (redova); Atribut = imenovano polje relacije sa definisanim domenom."
  },
  {
    "id": 2,
    "question": "Definiši šta je kandidat za ključ u relacionom modelu.",
    "answers": [],
    "correctAnswer": "Kandidat za ključ je determinanta koja u potpunosti funkcionalno određuje sve nekuljučne atribute relacije; mora zadovoljavati jedinstvenost i neredundantnost."
  },
  {
    "id": 3,
    "question": "Navedite uslove koje tabela mora da ispuni da bi se smatrala relacijom.",
    "answers": [],
    "correctAnswer": "Ne postoje duplikati redova, redosled redova nije značajan, redosled kolona nije značajan, vrednosti atributa su atomarne."
  },
  {
    "id": 4,
    "question": "Definišite determinantu i kandidata za ključ u relacionom modelu.",
    "answers": [],
    "correctAnswer": "Determinanta je atribut od kojeg drugi atribut zavisi; kandidat za ključ je determinanta koja određuje sve atribute i zadovoljava uslove jedinstvenosti i neredundantnosti."
  },
  {
    "id": 5,
    "question": "Objasnite kako se realizuje zaključavanje u sistemima baza podataka.",
    "answers": [],
    "correctAnswer": " u Sistemima baza podataka koristi se dvostepeno zaključavanje (2PL). Nakon što transakcija zaključa neki resurs, ne sme da oslobodi taj resurs dok ne završi sa radom. Ovde se koriste ekskluzivni i deljivi lokoti. "
  },
  {
    "id": 6,
    "question": "Navedite osnovne operacije relacione algebre.",
    "answers": [],
    "correctAnswer": "Unija, presek, razlika, Dekartov proizvod, selekcija, projekcija, spajanje, deljenje."
  },
  {
    "id": 7,
    "question": "Objasnite relacioni račun n-torki i relacioni račun domena.",
    "answers": [],
    "correctAnswer": "Relacioni račun n-torki koristi varijable koje označavaju cele redove (n-torke), dok račun domena koristi varijable koje označavaju pojedinačne vrednosti iz domena atributa."
  },
  {
    "id": 8,
    "question": "Objasnite BASE osobine NoSQL baza podataka.",
    "answers": [],
    "correctAnswer": "Basically Available – sistem je dostupan iako svi delovi nisu dostupni; Soft-state – ne mora stalno biti konzistentan; Eventual consistency – sistem postaje konzistentan posle nekog vremena."
  },
  {
    "id": 9,
    "question": "Objasnite šta su integritet entiteta i referencijalni integritet.",
    "answers": [],
    "correctAnswer": "Integritet entiteta: primarni ključ ne može biti NULL; Referencijalni integritet: vrednost stranog ključa mora biti NULL ili odgovarati nekom primarnom ključu."
  },
  {
    "id": 10,
    "question": "Navedite prednosti korišćenja pogleda i uslove pod kojima pogled može biti ažuriran.",
    "answers": [],
    "correctAnswer": "Prednosti korišćenja pogleda: Jednostavnost – korisnici rade sa uprošćenim tabelama koje je admin pripremio. Sigurnost – korisnicima se prikazuje samo deo podataka na koji imaju pravo. Performanse – pogledi se čuvaju u iskompajliranom obliku i ubrzavaju izvršavanje. Nezavisnost podataka – programi rade nad pogledom, pa promena baze ne traži promenu programa, već samo promenu definicije pogleda. Pogled je virtuelna tabela, ne čuva svoje podatke i ne zauzima memoriju. Uslovi da pogled bude ažuriran: Mora biti zasnovan na jednoj bazičnoj tabeli. Mora sadržati ključ te tabele. Ne sme koristiti DISTINCT, GROUP BY, HAVING ili agregatne funkcije. WHERE deo ne sme imati podupite koji se pozivaju na istu tabelu iz FROM dela."
  },
  {
    "id": 11,
    "question": "Šta je transakcija? Objasniti skup osobina koje transakcija mora da poseduje.",
    "answers": [],
    "correctAnswer": "Transakcija je jedno izvršenje logičke jedinice posla nad bazom podataka i mora da poseduje ACID osobine – atomnost, konzistentnost, izolovanost i trajnost."
  },
  {
    "id": 12,
    "question": "Osnovne prednosti korišćenja pogleda. Navesti i objasniti.",
    "answers": [],
    "correctAnswer": "Jednostavnost korišćenja (pregledni prikaz podataka za korisnike), sigurnost podataka (ograničavanje pristupa kroz poglede), performanse (pogledi se čuvaju u kompajliranom obliku) i nezavisnost podataka (promene u bazi ne zahtevaju promenu koda, već samo redefiniciju pogleda)."
  },
  {
    "id": 13,
    "question": "Koje uslove tabela treba da ispuni da bi bila relacija?",
    "answers": [],
    "correctAnswer": "(1) Ne postoje duplikati vrsta (redova); (2) redosled vrsta nije značajan; (3) redosled kolona nije značajan; (4) sve vrednosti atributa su atomarne."
  },
  {
    "id": 14,
    "question": "Objasniti integritet entiteta i referencijalni integritet.",
    "answers": [],
    "correctAnswer": "Integritet entiteta znači da ni jedan atribut primarnog ključa (ili njegov deo) ne sme imati null vrednost. Referencijalni integritet znači da svaka vrednost stranog ključa mora biti either jednaka nekoj vrednosti primarnog ključa odgovarajuće relacije ili null."
  },
  {
    "id": 15,
    "question": "Navesti sličnosti i razlike između relacione algebre i relacionog računa.",
    "answers": [],
    "correctAnswer": "Relaciona algebra je proceduralni jezik (nudi skup eksplicitnih operacija za dobijanje rezultata), dok je relacioni račun neproceduralni (deklarativno opisuje uslov koji rezultat treba da ispuni). Obe paradigme su ekvivalentne po izražajnoj snazi."
  },
  {
    "id": 16,
    "question": "Objasniti razliku između vrednosnih ograničenja i strukturnih ograničenja u modelu objekat-veza.",
    "answers": [],
    "correctAnswer": "Strukturna ograničenja odnose se na grafički iskazane veze (npr. kardinalitet veze u modelu objekat-veza), dok vrednosna ograničenja definišu dozvoljene vrednosti atributa (npr. domeni atributa i pravila za njihove promene)."
  },
  {
    "id": 17,
    "question": "Objasniti razliku između deljivog i ekskluzivnog lokota.",
    "answers": [],
    "correctAnswer": "Deljivi lokot (shared lock) omogućava da više transakcija istovremeno čitaju isti resurs, ali nijedna ne može postaviti ekskluzivni lokot na taj resurs dok traje shared lokot. Ekskluzivni lokot (exclusive lock) jednoj transakciji daje isključivo pravo upisa na resurs – dok traje ekskluzivni lokot, nijedna druga transakcija ne može postaviti ni shared ni ekskluzivni lokot na taj resurs."
  },
  {
    "id": 18,
    "question": "Objasniti pojmove „živi“ i „mrtvi“ lokot. Navesti i objasniti tehnike za rešavanje „mrtvog lokota“.",
    "answers": [],
    "correctAnswer": "„Živi lokot” (livelock) predstavlja situaciju gde neka transakcija neprekidno ostaje u stanju čekanja (uvek je pretekne druga transakcija pri zaključavanju potrebnog resursa). Rešava se uvođenjem fiksnog reda zaključavanja (FIFO redosled). „Mrtvi lokot” (deadlock) nastaje kada skup transakcija međusobno blokira jedna drugu (ciklična čekanja). Tehnike za rešavanje problema mrtvog lokota: 1. Prekidanje transakcija posle isteka intervala vremena 2. Prevencija lokota 3. Detekcija “mrtvog čvora”"
  },
  {
    "id": 19,
    "question": "Kako se mogu klasifikovati modeli podataka po kriterijumu načina opisa dinamike sistema?",
    "answers": [],
    "correctAnswer": "Prema načinu opisivanja dinamike razlikuju se konvencionalni modeli podataka (npr. hijerarhijski, mrežni, relacioni – sva dinamika sistema je izvan baze, u aplikacijama), zatim objektni modeli (dinamika sistema se podjednako opisuje u bazi i u aplikacijama) i aktivne baze podataka (značajan deo dinamike sistema smešten u bazi kroz pravila tipa <uslov, akcija>)."
  },
  {
    "id": 20,
    "question": "Objasniti šta je pogled, koje su osnovne prednosti u korišćenju, dati uslove koje treba da ispuni pogled da bi mogao da posluži za ažuriranje baze.",
    "answers": [],
    "correctAnswer": "Pogled je virtuelna tabela (skup upita) preko koje se mogu videti podaci iz jedne ili više tabela baze; nema sopstvene podatke ni memoriju. Prednosti: jednostavnije korišćenje, bezbednost (ograničen prikaz podataka), bolje performanse i programska nezavisnost od promena u bazi. Ažuriranje: pogled je ažurabilan ako obuhvata samo jednu baznu tabelu (ili više tabela ali uz INSTEAD OF trigere), sadrži primarne ključeve te tabele i ne sadrži agregacije ili DISTINCT (tj. svaka vrsta pogleda odgovara tačno jednoj vrsti bazne tabele)."
  },
  {
    "id": 21,
    "question": "Ukratko objasniti 4 osnovne komponente svakog modela podataka.",
    "answers": [],
    "correctAnswer": "Svaki model podataka ima: (a) strukturu modela – skup koncepata za opis objekata, njihovih osobina i veza; (b) ograničenja – skup semantičkih ograničenja na vrednosti podataka; (c) operacije – skup operacija za prikaz i izmenu podataka; (d) dinamička pravila integriteta – definisanje osnovnih ponašanja sistema (npr. <operacija, ograničenje, akcija> pravila u aktivnim bazama)."
  },
  {
    "id": 22,
    "question": "Pravila integriteta relacionog modela. Primere ograničenja opisati preko operacija relacione algebre.",
    "answers": [],
    "correctAnswer": "Opšta pravila integriteta rel. modela su integritet entiteta i referencijalni integritet. (Primer: integritet entiteta zahteva da primarni ključ nema null – npr. π_sifraSmera(Student) ⊆ π_sifraSmera(Smer) ∪ {null} ilustrira referenc. integritet, gde svaka vrednost stranog ključa Student.SifraSmera mora postojati u primarnoj ključnoj koloni Smer.SifraSmera ili biti null.)"
  },
  {
    "id": 23,
    "question": "Poslovna pravila integriteta relacionog modela. Navesti primer za svaki podtip ograničenja.",
    "answers": [],
    "correctAnswer": "Uobičajeno je da se ova pravila integriteta podele na sledeće podtipove: • Pravila integriteta za domene, preko kojih se specifikuje koje vrednosti postoje u domenu; • Pravila integriteta za atribute, preko kojih se definišu dozvoljene vrednosti nekog atributa nezavisno od vrednosti drugih atributa u bazi; • Pravila integriteta za relacije, preko kojih je moguće vezati vrednost jednog, za vrednost drugog atributa u jednoj relaciji; • Pravila integriteta za bazu, preko kojih je moguće povezati vrednosti atributa iz više relacija."
  },
  {
    "id": 24,
    "question": "Navesti osnovne karakteristike graf baza podataka.",
    "answers": [],
    "correctAnswer": "Graf baze podataka su NoSQL baze optimizovane za podatke sa mnogo međusobnih veza (gusti grafovi, npr. društvene mreže). Nemaju fiksnu šemu i ne koriste SQL, ali podržavaju ACID transakcije. Primer takve baze je Neo4j."
  },
  {
    "id": 25,
    "question": "Objasniti različite načine povezivanja događaja i izvršenja ECA-pravila (trenutan, odložen, razdvojen način).",
    "answers": [],
    "correctAnswer": "Trenutan način: pravilo se proverava i izvršava odmah nakon detekcije događaja (pre završetka tekuće transakcije). Odložen način: izvršenje pravila se odlaže do završetka transakcije koja je proizvela događaj. Razdvojen način: pravilo se izvršava u posebnoj, nezavisnoj transakciji paralelno sa originalnom."
  },
  {
    "id": 26,
    "question": "Definisati pojmove determinanta i kandidat za ključ.",
    "answers": [],
    "correctAnswer": "Determinanta je svaki skup atributa na osnovu kojeg je drugi atribut u relaciji funkcionalno zavisan. Kandidat za ključ je determinanta koja funkcionalno određuje sve neključne atribute relacije (zadovoljava uslove jedinstvenosti i neredundantnosti; svaki kandidat za ključ može poslužiti kao primarni ključ)."
  },
  {
    "id": 27,
    "question": "Objasniti funkcionalnu i tranzitivnu zavisnost.",
    "answers": [],
    "correctAnswer": "Funkcionalna zavisnost: atribut (ili skup) Y je funkcionalno zavisan od X ako svakoj vrednosti X odgovara tačno jedna vrednost Y. Potpuna funkcionalna zavisnost znači da zavisnost važi od čitavog skupa X, a ne od nekog podskupa. Tranzitivna zavisnost: ako je X→Y i Y→Z (funkcionalno), tada postoji tranzitivna zavisnost X→Z (X određuje Z posredno preko Y)."
  },
  {
    "id": 28,
    "question": "Objasniti ANSI/SPARC tro-nivosku arhitekturu.",
    "answers": [],
    "correctAnswer": "ANSI/SPARC arhitektura uvodi tri nivoa apstrakcije baze: interni (fizički) nivo – kako su podaci fizički organizovani i smešteni; konceptualni nivo – logička šema baze (celokupan model podataka kojim SUBP upravlja kao zajedničkim resursom); eksterni (korisnički) nivo – jedan ili više pogleda na podatke prilagođenih krajnjim korisnicima/programima."
  },
  {
    "id": 29,
    "question": "Objasniti razliku između operacije spajanja i operacije unije u relacionom modelu.",
    "answers": [],
    "correctAnswer": "Unija (UNION) daje skup svih n-torki koje se pojavljuju u bar jednoj od dve relacije (skupovska operacija). Spajanje (JOIN) daje rezultat koji sadrži samo n-torke obe relacije koje ispunjavaju dati uslov poređenja nad svojim atributima (relaciona operacija povezivanja tabela)."
  },
  {
    "id": 30,
    "question": "Objasniti razlike između distinkt tipa i strukturiranog tipa u objektno-relacionom modelu.",
    "answers": [],
    "correctAnswer": "Distinktni tip je jednostavan, imenovani tip podatka definisan od strane korisnika (npr. novi primitivni tip); ima jedno vrednosno polje, nema podtipove i ne podržava nasleđivanje. Strukturirani tip je složeniji korisnički tip koji može imati više atributa (polja) i može podržavati nasleđivanje (može imati podtipove)."
  },
  {
    "id": 31,
    "question": "Koje su tri karakteristike modela podataka?",
    "answers": [],
    "correctAnswer": "Tipizacija (klasifikacija) – grupisanje sličnih objekata u odgovarajući tip ili klasu; generalizacija – apstrakcija u kojoj se više srodnih tipova predstavlja opštijim nadtipom; agregacija – apstrakcija u kojoj se skup objekata i njihovih veza tretira kao jedinstven, agregirani tip objekta."
  },
  {
    "id": 32,
    "question": "Ukratko objasniti vrste korisničkih i konstruisanih tipova, kreirati objektno-relacioni model koji to ilustruje (kolekcija studenata sa jednoznačnim atributima brojIndeksa, imePrezime, višeznačnim položeniIspiti i referentnom kolonom na nastavni plan).",
    "answers": [],
    "correctAnswer": "Korisnički definisani tipovi mogu biti: (1) distinkt tip – novi skalarni tip definisan na bazi postojećeg (uvodi strogo tipiziranje, nema podtipova); (2) strukturirani tip – kompleksan tip sa više atributa, može imati metode i podržava nasleđivanje. Konstruisani tipovi (u SQL:1999) obuhvataju: referentni tip (REFERENCE na neki objekat ili red u tabeli), red (ROW) tip – zapis (niz imenovanih polja raznih tipova), i kolekciju – tip koji predstavlja skup elemenata istog tipa (npr. niz vrednosti). Primer implementacije: definisanje tabele Studenti sa kolonom tipa ARRAY za položene ispite i REF kolonom koja upućuje na objekat tipa NastavniPlan, gde je NastavniPlan definisan kao strukturirani tip sa poljima ŠifraPlana i DatumOd (kao u datom scenariju)."
  },
  {
    "id": 33,
    "question": "Semantika i obrada ECA pravila.",
    "answers": [],
    "correctAnswer": "U aktivnim bazama podataka, pravila su definisana po ECA modelu (Event-Condition-Action pravila) – svako pravilo ima određeni događaj okidanja, uslov koji se proverava po nastanku događaja i akciju koja se izvršava ako je uslov zadovoljen. Sistem prvo mora detektovati primitivne događaje (npr. izvršenje operacije nad bazom, protek vremena ili aplikativni signal), koje se zatim mogu kombinovati u složene događaje. Obrada ECA pravila: nakon nastanka definisanog događaja, automatski se izvršava odgovarajuća akcija, odmah ili odloženo u skladu sa transakcionim načinom povezivanja (npr. AFTER trigger u SQL izvršava akciju nakon uspešnog izvršenja događaja). Dinamičko pravilo integriteta čini trojka <Ograničenje, Operacija, Akcija> preko koje se iskazuje koja se akcija preduzima kada neka operacija naruši definisano ograničenje."
  },
  {
    "id": 34,
    "question": "Navesti naziv i objašnjenje uslova koji mora biti ispunjen da bi se izvršila operacija diferencije.",
    "answers": [],
    "correctAnswer": "Diferencija. Date su relacije R1 i R2 koje zadovoljavaju navedeni uslov kompatibilnosti. Rezultat operacije diferencije R3 := R1 - R2 su n-torke relacije R1 koje nisu istovremeno i n-torke relacije R2."
  },
  {
    "id": 35,
    "question": "U strukturnim dinamičkim pravilima integriteta, navesti i objasniti akcije koje se preduzimaju kada neka od navedenih operacija naruši kardinalnost preslikavanja.",
    "answers": [],
    "correctAnswer": "Akcije za sprečavanje narušivanja kardinalnosti preslikavanja: - RESTRICT - Operacija se ne izvršava ako narušava odgovarajući strukturni integritet. Na primer, ne dozvoljava se brisanje nekog pojavljivanja ako postoji njegov preslikani deo. - CASCADE - Operacija se prenosi na objekat kodomen da bi se zadovoljio strukturni model. - SETNULL - Uspostavlja se veza sa “nepoznatim objektom” objektom (“nula objektom”) - SETDEFAULT - Uspostavlja se veza sa “default” objektom kodomena, pod pretpostavkom da je “default” pojavljivanje klase kodomena definisano."
  },
  {
    "id": 36,
    "question": "Normalizacija se tretira kao postupak kojim se odstranjuju tzv. \"anomalije u održavanju (ažuriranju)\" relacija do kojih dolazi zbog redundanse podataka u bazi podataka. Navesti i objasniti koje sve anomalije u održavanju se mogu javiti.",
    "answers": [],
    "correctAnswer": "Termin „normalizovana relacija” se koristi za relacije u prvoj normalnoj formi. Ostale normalne forme relacija, nisu zahtev samog relacionog modela, već predstavljaju način da se iskažu kriterijumi za dobru praksu konceptualnog modelovanja, odnosno logičkog projektovanja relacionog baze podataka. Uobičajeno je da se normalizacija tretira kao postupak kojim se odstranjuju tzv. „anomalije u održavanju (ažuriranju)” relacija do kojih dolazi zbog redundanse podataka u bazi podataka. Osnovne operacije održavanja (ažuriranja) baze podataka u relacionom modelu su dodavanje nove n-torke u relaciju, izbacivanje neke n-torke iz relacije i izmena vrednosti nekog atributa u relaciji. Redundansa podataka je osnovni uzrok sledećih anomalija u održavanju: • Anomalije u dodavanju su naziv za situaciju u kojoj u bazu podataka nije moguće ubaciti neki logički skup podataka, a da se pri tome, zbog strukture relacija, ne zahteva i ubacivanje nekih drugih podataka. • Anomalije u izbacivanju su naziv za situaciju u kojoj izbacivanje nekog logičkog skupa podataka iz baze, prouzrokuje i neželjeno izbacivanje nekih drugih podataka. • Anomalije u promeni sadržaja su situacija u kojoj promena jednog podatka zahteva i promenu nekih drugih podataka u bazi."
  },
  {
    "id": 37,
    "question": "Navesti i objasniti tehnike za generisanje strategije kod optimizacije upita.",
    "answers": [],
    "correctAnswer": "Tehnike za generisanje strategije: • Heuristička optimizacija – primena heurističkih pravila za redefinisanje redosleda operacija u stablu upita i planu izvršenja upita – u znatnom broju slučajeva ostvaruju prihvatljive rezultate, ali to ne mora važiti uvek • Optimizacija zasnovana ceni – sistematska procena cene primene raspoloživih strategija, tj. planova izvršenja upita – Izbor strategije, tj. plana izvršenja upita, s najmanjom procenjenom cenom U praksi konkretnih RSUBP, optimizatori upita kombinuju obe tehnike."
  },
  {
    "id": 38,
    "question": "Ako pretpostavimo da transakcije Ti i Tj pripadaju nekom izvršenju, navesti i objasniti kombinacije parova operacija koje NEĆE biti u konfliktu.",
    "answers": [],
    "correctAnswer": "Ako pretpostavimo da transakcije Ti i Tj pripadaju nekom izvršenju, tada sledeći parovi operacija neće biti u konfliktu: 1. ri(X), rj(Y) nije konflikt čak i kada je X=Y jer ni jedna ni druga operacija ne manjaju stanje baze podataka 2. ri(X), wj(Y) nije konflikt pod pretpostavkom X ≠ Y 3. wi(X), rj(Y) nije konflikt pod pretpostavkom X ≠ Y 4. wi(X), wj(Y) nije konflikt pod pretpostavkom X ≠ Y. Opštije, dve susedne operacije različitih transakcija mogu da zamene mesta ako NIJE zadovoljen jedan od uslova: 1. Operacije se obavljaju nad istim elementom 2. Barem jedna od njih je upisivanje"
  },
  {
    "id": 39,
    "question": "Objasniti pojam granularnosti zaključavanja, hijerarhijskog zaključavanja i navesti dodatne vrste lokota koji se definišu za taj protokol zaključavanja.",
    "answers": [],
    "correctAnswer": "Granularnost zaključavanja - nivo (opštost) resursa zaključavanja: - nivo pojedinačnog podatka, vrednosti obeležja - nivo torke - nivo bloka BP - nivo tabele (relacije) - nivo baze podataka. Pored ekskluzivnog lokota (XL) i deljivog lokota (SL) za ovaj protokol se definišu i sledeće vrste lokota: - ISL - nameravani deljivi lokot: transakcija namerava da postavi deljivi lokotni element baze podataka - IXL - nameravani ekskluzivni lokot: transakcija namerava da postavi ekskluzivni lokot na element baze podataka - SIXL - nameravano deljivo-ekskluzivno zaključavanje: transakcija namerava da postavi deljivi lokot na element baze podataka X i eksluzivni lokot na neki element na nižem nivou granularnosti koji je deo elementa X."
  },
  {
    "id": 40,
    "question": "Koje uslove mora da zadovolji kolekcija atributa relacije R kako bi se ona smatrala ključem relacije R? (navesti i objasniti)",
    "answers": [],
    "correctAnswer": "Ključ relacije mora zadovoljiti dva uslova: 1. Jedinstvenost (Uniqueness) – za svaku instancu relacije ne postoje dva reda sa istom kombinacijom vrednosti atributa iz ključa. 2. Minimalnost (Irredundancy) – nijedan atribut se ne može izbaciti iz ključa, a da i dalje ostane svojstvo jedinstvenosti."
  },
  {
    "id": 41,
    "question": "Navesti korake opšteg postupka optimizacije upita.",
    "answers": [],
<<<<<<< HEAD
    "correctAnswer": "1. Generisanje izraza relacione algebre od teksta upita 2. Transformacija u inicijalno stablo upita 3. Transformacija u finalno stablo upita 4. Transformacija u plan(ove) izvršenja upita • izbor strategije izvršenja upita • izbor (formiranje) plana izvršenja upita s najboljom ocenom efikasnosti, odnosno, najmanjom cenom izvršavanja."
=======
    "correctAnswer": "1.Generisanje izraza relacione algebre. 2.Transforma u inicijalno stablo upita. 3.Transformacija u finalno stablo upita. 4.Transformacija u plan/ove izvršenja upita: Izbor strategije izvrsenja upita Izbor plana sa najmanjom procenjenom cenom."
>>>>>>> a0c8afe87b20558d03152ec2a075a779e9764a47
  },
  {
    "id": 42,
    "question": "Opisati navedene korake procesiranja SQL upita: a) Parsiranje b) Skeniranje",
    "answers": [],
    "correctAnswer": "Parsiranje... je provera sintaksne ispravnosti upita. Skeniranje... je identifikacija tokena u tekstu upita (SQL ključnih reči, imena atributa i tabela). Validacija... je provera semantičke ispravnosti imena u šemi baze podataka (uvidom u rečnik podataka). Povezivanje (binding)... je zamena promenljivih iz spoljnjeg okruženja (host variables) konkretnim vrednostima (formiranje teksta SQL upita u direktnoj formi)."
  },
  {
    "id": 43,
    "question": "Dati definicije diferencije i možda spajanja.",
    "answers": [],
    "correctAnswer": "1. Rezultat operacije diferencije (razlike) R3 := R1 - R2 je relacija R3 koja ima kao elemente sve elemente relacije R1 koji nisu elementi relacije R2. 2. Kod možda spajanja selektuju se one n-torke relacije za koje se predikat spajanja, na osnovu trovrednosnih tablica istinitosti, sračunava u “nula vrednost”."
  },
  {
    "id": 44,
    "question": "Navesti i objasniti nivoe ANSI/SPARC arhitekture.",
    "answers": [],
    "correctAnswer": "1. Eksterni nivo – opisuje način na koji korisnici vide bazu (pogledi, personalizovani prikazi podataka). 2. Konceptualni nivo – opisuje logičku strukturu cele baze (entiteti, relacije, ograničenja). 3. Interni nivo – opisuje fizičko skladištenje podataka (strukture fajlova, indeksi, organizacija memorije). Ova podela obezbeđuje logičku i fizičku nezavisnost podataka."
  },
  {
    "id": 45,
    "question": "Navesti i objasniti vrste lokota u protokolu zaključavanja.",
    "answers": [],
    "correctAnswer": "1. Deljeni lokot (S – Shared lock): više transakcija može čitati podatak, ali nijedna ne može menjati dok je zaključan. 2. Ekskluzivni lokot (X – Exclusive lock): samo jedna transakcija može menjati podatak, i nijedna druga ne može ni čitati ni pisati. 3. Namerni lokoti (Intention locks – IS, IX, SIX): koriste se u hijerarhijskom zaključavanju da označe nameru transakcije da zaključa niže nivoe. 4. Lokoti na nivou tabele, stranice ili reda: definišu granularnost zaključavanja."
  },
  {
    "id": 46,
    "question": "Pogled ima za cilj da:",
    "answers": [],
    "correctAnswer": "Pogled ima za cilj da podigne nivo apstrakcije još više, i obezbedi nam logičku nezavisnost podataka."
  },
  {
    "id": 47,
    "question": "U čemu se ogledaju izazovi distribuiranih baza podataka?",
    "answers": [],
    "correctAnswer": "Svaka lokalna BP (SUBP) podržava ACID lokalno za svaku podtransakciju i eliminiše lokalne zastoje. U čemu se onda ogledaju izazovi? Globalna atomičnost: sve kohorte moraju prekinuti ili se sve obavežu, Globalni zastoji: ne sme biti zastoja koji uključuje više lokacija, Globalna serijalizacija: distribuirana transakcija mora da se globalno serijalizuje."
  },
  {
    "id": 48,
    "question": "Označiti tačne tvrdnje za skeniranje indeksa po jedinstvenosti:",
    "answers": [],
    "correctAnswer": "- Sprovodi se kada postoji UNIQUE ili PRIMARY KEY ograničenje - Može se primeniti samo sa “ekvi” poređenjima - Vraća maksimalno jedan ROWID"
  },
  {
    "id": 49,
    "question": "CAP teorema obuhvata sledeće karakteristike:",
    "answers": [],
    "correctAnswer": "Consistency (konzistentnost) - svako čitanje prihvata podataka sa poslednjeg upisivanja ili grešku. Više čvorova se ažurira pre nego što se omogući dalje čitanje. Availability (dostupnost) - Svaki zahtev prihvata odgovor (bez greške) - bez garancije da sadrži podatak sa poslednjeg upisivanja. Tolerance to network Partitions (tolerancija ka „deljenju“ mreže, podeljenost mreže NIJE ISTO može da vas zbuni samo) - Sistem funkcioniše bez obzira na proizvoljan broj poruka koje su odbačene (ili kasne) od strane mreže koja povezuje čvorove."
  },
  {
    "id": 50,
    "question": "Navesti i objasniti dve komponente modela podataka.",
    "answers": [],
    "correctAnswer": "Svaki model podataka poseduje tri osnovne komponente: - Strukturu modela, - Ograničenja - semantička ograničenja na vrednosti podataka koja se ne mogu predstaviti samom strukturom modela, - Operacije nad konceptima strukture preko kojih je moguće prikazati i menjati vrednosti podataka u modelu. Detaljnije: 1. Struktura modela Struktura modela predstavlja način na koji su podaci organizovani i prikazani u okviru sistema za upravljanje bazama podataka. Ona definiše osnovne elemente podataka i odnose između njih. Na primer: - Entiteti predstavljaju objekte u stvarnom svetu (npr. korisnici, proizvodi, narudžbine), dok atributi opisuju svojstva tih entiteta (npr. ime korisnika, cena proizvoda). - Struktura modela obuhvata i odnose između entiteta (npr. jedan-na-jedan, jedan-na-više, više-na-više). - U nekim modelima, entiteti mogu biti organizovani u hijerarhiju (npr. kategorije i potkategorije) ili agregirani u složenije strukture (npr. objekti koji sadrže druge objekte). 2. Ograničenja Ograničenja u modelu podataka definišu pravila i uslove koji se moraju poštovati kako bi podaci bili ispravni i dosledni. Ova ograničenja često uključuju: - Ograničenja koja se ne mogu izraziti samom strukturom modela, već se odnose na značenje podataka. Na primer, datum rođenja korisnika mora biti u prošlosti, ili količina naručenih proizvoda mora biti pozitivna vrednost. - Pravila koja garantuju tačnost i konzistentnost podataka, kao što su: - Vrednosti u određenoj koloni moraju biti jedinstvene. - Jedan ili više atributa koji jedinstveno identifikuju svaki red u tabeli. - Vezivanje atributa iz jedne tabele na primarni ključ druge tabele radi održavanja referencijalnog integriteta."
  },
  {
    "id": 51,
    "question": "Zašto bi kohorta mogla da prekine izvršavnje?",
    "answers": [],
    "correctAnswer": "- Odložena evaluacija ograničenja integriteta - Neuspeh validacije (optimistična kontrola) - Zastoj - Pad kohorte - Neuspeh sprečava komunikaciju sa kohortom"
  },
  {
    "id": 52,
    "question": "Pogled se može koristiti za:",
    "answers": [],
    "correctAnswer": "- očuvanje privatnosti podataka, - kontrolu pristupa, - implementaciju veze generalizacije."
  }
]
